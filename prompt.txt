# LLM Agent GeRM项目构思

您的项目是一个利用大模型Agent来自动为代码仓库生成README.md文件的工具，集成OpenAI API。这是一个很有价值的项目，因为好的README文档对于开源项目至关重要，但开发者常常忽略或没有时间编写。

## 项目目录框架

```
readme-generator/
│
├── .env.example                 # 环境变量示例文件
├── .gitignore                   # Git忽略文件
├── README.md                    # 项目自身的README
├── requirements.txt             # 项目依赖
├── setup.py                     # 包安装脚本
│
├── config/
│   └── config.py                # 配置管理
│
├── src/
│   ├── __init__.py
│   ├── main.py                  # 主入口文件
│   ├── api/
│   │   ├── __init__.py
│   │   └── openai_client.py     # OpenAI API客户端
│   │
│   ├── models/
│   │   ├── __init__.py
│   │   └── agent.py             # LLM Agent实现
│   │
│   ├── utils/
│   │   ├── __init__.py
│   │   ├── code_parser.py       # 代码解析工具
│   │   ├── file_handler.py      # 文件处理工具
│   │   └── prompt_templates.py  # 提示词模板
│   │
│   └── services/
│       ├── __init__.py
│       ├── code_analyzer.py     # 代码分析服务
│       └── readme_generator.py  # README生成服务
│
├── tests/
│   ├── __init__.py
│   ├── test_agent.py            # Agent测试
│   ├── test_code_analyzer.py    # 代码分析测试
│   └── test_readme_generator.py # README生成测试
│
└── examples/
    ├── example_repo/            # 示例代码仓库
    └── generated_readmes/       # 生成的README示例
```

## 文件内容实现

### .env.example

```
# OpenAI API配置
OPENAI_API_KEY=your_openai_api_key_here
OPENAI_MODEL=gpt-4o

# 应用配置
MAX_TOKENS=4096
TEMPERATURE=0.7
LOG_LEVEL=INFO
```

### .gitignore

```
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
*.egg-info/
.installed.cfg
*.egg

# 环境变量文件
.env

# 虚拟环境
venv/
ENV/

# IDE
.idea/
.vscode/
*.swp
*.swo

# 日志
*.log

# 生成的README示例
examples/generated_readmes/*
!examples/generated_readmes/.gitkeep
```

### README.md

```markdown
# README Generator

一个基于LLM Agent的智能README生成工具，可自动为代码仓库创建专业的README.md文件。

## 特性

- 自动分析代码仓库结构和内容
- 识别项目的主要功能和技术栈
- 提取关键组件和依赖
- 生成包含安装步骤、使用示例和贡献指南的完整README
- 支持多种编程语言和项目类型

## 安装

```bash
# 克隆仓库
git clone https://github.com/yourusername/readme-generator.git
cd readme-generator

# 安装依赖
pip install -r requirements.txt

# 设置环境变量
cp .env.example .env
# 编辑.env文件，添加你的OpenAI API密钥
```

## 使用方法

```bash
# 基本用法
python -m src.main --repo_path /path/to/your/repository

# 高级选项
python -m src.main --repo_path /path/to/your/repository --output readme_custom.md --model gpt-4o --verbose
```

## 配置选项

| 参数 | 描述 | 默认值 |
|------|------|--------|
| `--repo_path` | 要分析的代码仓库路径 | 必填 |
| `--output` | 输出README文件的名称 | README.md |
| `--model` | 要使用的OpenAI模型 | 从.env文件读取 |
| `--verbose` | 显示详细日志 | False |

## 许可证

MIT

## 贡献

欢迎贡献！请随时提交问题或拉取请求。
```

### requirements.txt

```
openai>=1.3.0
python-dotenv>=1.0.0
click>=8.1.3
tqdm>=4.66.1
pyyaml>=6.0
langchain>=0.0.312
tiktoken>=0.5.1
```

### setup.py

```python
from setuptools import setup, find_packages

with open("README.md", "r", encoding="utf-8") as fh:
    long_description = fh.read()

with open("requirements.txt", "r", encoding="utf-8") as f:
    requirements = f.read().splitlines()

setup(
    name="readme-generator",
    version="0.1.0",
    author="Your Name",
    author_email="your.email@example.com",
    description="LLM Agent for automatic README generation",
    long_description=long_description,
    long_description_content_type="text/markdown",
    url="https://github.com/yourusername/readme-generator",
    packages=find_packages(),
    classifiers=[
        "Programming Language :: Python :: 3",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
    ],
    python_requires=">=3.8",
    install_requires=requirements,
    entry_points={
        "console_scripts": [
            "readme-generator=src.main:main",
        ],
    },
)
```

### config/config.py

```python
import os
from dotenv import load_dotenv

# 加载环境变量
load_dotenv()

class Config:
    # OpenAI API配置
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")
    
    # 模型参数
    MAX_TOKENS = int(os.getenv("MAX_TOKENS", 4096))
    TEMPERATURE = float(os.getenv("TEMPERATURE", 0.7))
    
    # 应用配置
    LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
    
    # 输出配置
    DEFAULT_OUTPUT_FILENAME = "README.md"
    
    # 提示词配置
    SYSTEM_PROMPT = """你是一个专业的README文档生成器。你的任务是分析代码仓库，
    并生成一个全面、专业的README.md文件。关注项目的主要功能、安装步骤、使用方法、
    技术栈和架构。确保README清晰、结构良好并提供足够的细节帮助用户理解和使用项目。"""
    
    @classmethod
    def validate_config(cls):
        """验证配置是否有效"""
        if not cls.OPENAI_API_KEY:
            raise ValueError("OPENAI_API_KEY未设置，请在.env文件中配置")
        
        return True
```

### src/\_\_init\_\_.py

```python
# 包初始化文件
```

### src/main.py

```python
import os
import sys
import logging
import click
from tqdm import tqdm
from typing import Optional

# 添加项目根目录到Python路径
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config.config import Config
from src.services.code_analyzer import CodeAnalyzer
from src.services.readme_generator import ReadmeGenerator
from src.utils.file_handler import FileHandler

# 配置日志
logging.basicConfig(
    level=getattr(logging, Config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@click.command()
@click.option('--repo_path', required=True, help='要分析的代码仓库路径')
@click.option('--output', default=Config.DEFAULT_OUTPUT_FILENAME, help='输出README文件的名称')
@click.option('--model', default=None, help='要使用的OpenAI模型')
@click.option('--verbose', is_flag=True, help='显示详细日志')
def main(repo_path: str, output: str, model: Optional[str], verbose: bool):
    """根据代码仓库生成README.md文件的命令行工具"""
    try:
        # 验证配置
        Config.validate_config()
        
        # 设置详细日志
        if verbose:
            logging.getLogger().setLevel(logging.DEBUG)
        
        # 如果提供了模型参数，覆盖配置
        if model:
            Config.OPENAI_MODEL = model
        
        logger.info(f"开始分析仓库: {repo_path}")
        
        # 分析代码仓库
        with tqdm(total=3, desc="生成README") as pbar:
            pbar.set_description("分析代码仓库")
            code_analyzer = CodeAnalyzer(repo_path)
            repo_analysis = code_analyzer.analyze()
            pbar.update(1)
            
            pbar.set_description("生成README内容")
            readme_generator = ReadmeGenerator()
            readme_content = readme_generator.generate(repo_analysis)
            pbar.update(1)
            
            pbar.set_description("保存README文件")
            output_path = os.path.join(repo_path, output)
            FileHandler.write_file(output_path, readme_content)
            pbar.update(1)
        
        logger.info(f"README生成完成，已保存到: {output_path}")
        
    except Exception as e:
        logger.error(f"生成README时出错: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
```

### src/api/\_\_init\_\_.py

```python
# API包初始化文件
```

### src/api/openai_client.py

```python
import logging
from typing import Dict, Any, List
from openai import OpenAI

from config.config import Config

logger = logging.getLogger(__name__)

class OpenAIClient:
    """OpenAI API客户端类"""
    
    def __init__(self):
        """初始化OpenAI客户端"""
        self.client = OpenAI(api_key=Config.OPENAI_API_KEY)
        self.model = Config.OPENAI_MODEL
        self.max_tokens = Config.MAX_TOKENS
        self.temperature = Config.TEMPERATURE
    
    def chat_completion(
        self, 
        system_prompt: str, 
        user_prompt: str,
        temperature: float = None,
        max_tokens: int = None
    ) -> str:
        """
        发送请求到OpenAI Chat Completion API
        
        Args:
            system_prompt: 系统提示词
            user_prompt: 用户提示词
            temperature: 温度参数，控制输出的随机性
            max_tokens: 生成的最大token数
            
        Returns:
            str: 模型生成的响应文本
        """
        if temperature is None:
            temperature = self.temperature
            
        if max_tokens is None:
            max_tokens = self.max_tokens
        
        try:
            logger.debug(f"发送请求到OpenAI API，模型: {self.model}")
            
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=temperature,
                max_tokens=max_tokens
            )
            
            # 提取生成的文本
            generated_text = response.choices[0].message.content
            
            logger.debug(f"成功从OpenAI API获取响应，长度: {len(generated_text)}")
            return generated_text
            
        except Exception as e:
            logger.error(f"OpenAI API调用失败: {str(e)}")
            raise
```

### src/models/\_\_init\_\_.py

```python
# 模型包初始化文件
```

### src/models/agent.py

```python
import logging
from typing import Dict, Any, List

from src.api.openai_client import OpenAIClient
from src.utils.prompt_templates import PromptTemplates
from config.config import Config

logger = logging.getLogger(__name__)

class ReadmeAgent:
    """基于LLM的README生成Agent"""
    
    def __init__(self):
        """初始化README生成Agent"""
        self.openai_client = OpenAIClient()
        self.system_prompt = Config.SYSTEM_PROMPT
    
    def generate_readme(self, repo_analysis: Dict[str, Any]) -> str:
        """
        生成README内容
        
        Args:
            repo_analysis: 包含代码仓库分析结果的字典
            
        Returns:
            str: 生成的README内容
        """
        logger.info("开始生成README内容")
        
        # 构建用户提示词
        user_prompt = PromptTemplates.get_readme_generation_prompt(repo_analysis)
        
        # 调用OpenAI API生成README
        try:
            readme_content = self.openai_client.chat_completion(
                system_prompt=self.system_prompt,
                user_prompt=user_prompt
            )
            
            logger.info("README内容生成成功")
            return readme_content
            
        except Exception as e:
            logger.error(f"生成README内容失败: {str(e)}")
            raise
    
    def analyze_code_file(self, file_path: str, file_content: str) -> Dict[str, Any]:
        """
        分析单个代码文件
        
        Args:
            file_path: 文件路径
            file_content: 文件内容
            
        Returns:
            Dict[str, Any]: 文件分析结果
        """
        logger.debug(f"分析代码文件: {file_path}")
        
        # 构建文件分析提示词
        user_prompt = PromptTemplates.get_file_analysis_prompt(file_path, file_content)
        
        # 调用OpenAI API分析文件
        try:
            analysis_result = self.openai_client.chat_completion(
                system_prompt="你是一个代码分析专家，请分析以下代码文件并提取关键信息。",
                user_prompt=user_prompt,
                temperature=0.3  # 降低温度以获得更精确的分析
            )
            
            # 解析分析结果
            try:
                import json
                analysis_dict = json.loads(analysis_result)
                return analysis_dict
            except json.JSONDecodeError:
                # 如果无法解析为JSON，直接返回文本
                return {"summary": analysis_result}
                
        except Exception as e:
            logger.error(f"分析代码文件失败: {str(e)}")
            return {"error": str(e)}
```

### src/utils/\_\_init\_\_.py

```python
# 工具包初始化文件
```

### src/utils/code_parser.py

```python
import os
import logging
from typing import Dict, List, Set, Any

logger = logging.getLogger(__name__)

class CodeParser:
    """代码解析工具类"""
    
    # 支持的文件类型及其对应的语言
    SUPPORTED_EXTENSIONS = {
        '.py': 'Python',
        '.js': 'JavaScript',
        '.ts': 'TypeScript',
        '.jsx': 'React',
        '.tsx': 'React TypeScript',
        '.html': 'HTML',
        '.css': 'CSS',
        '.scss': 'SCSS',
        '.java': 'Java',
        '.kt': 'Kotlin',
        '.cpp': 'C++',
        '.c': 'C',
        '.h': 'C/C++ Header',
        '.go': 'Go',
        '.rs': 'Rust',
        '.rb': 'Ruby',
        '.php': 'PHP',
        '.swift': 'Swift',
        '.m': 'Objective-C',
        '.cs': 'C#',
        '.sh': 'Shell',
        '.md': 'Markdown',
        '.json': 'JSON',
        '.yaml': 'YAML',
        '.yml': 'YAML',
        '.xml': 'XML',
        '.sql': 'SQL',
    }
    
    # 需要忽略的目录
    IGNORED_DIRS = {
        'node_modules', 'venv', '.git', '.github', '__pycache__',
        'build', 'dist', '.idea', '.vscode', 'target', 'bin'
    }
    
    # 需要忽略的文件
    IGNORED_FILES = {
        '.DS_Store', '.gitignore', '.env', '.gitattributes'
    }
    
    @classmethod
    def identify_language(cls, file_path: str) -> str:
        """识别文件的编程语言"""
        _, ext = os.path.splitext(file_path)
        return cls.SUPPORTED_EXTENSIONS.get(ext.lower(), 'Unknown')
    
    @classmethod
    def should_ignore(cls, path: str) -> bool:
        """判断是否应该忽略该路径"""
        parts = path.split(os.sep)
        filename = os.path.basename(path)
        
        # 检查是否在忽略的目录中
        for part in parts:
            if part in cls.IGNORED_DIRS:
                return True
        
        # 检查是否是忽略的文件
        if filename in cls.IGNORED_FILES:
            return True
            
        return False
    
    @classmethod
    def parse_imports(cls, content: str, language: str) -> List[str]:
        """解析文件中的导入语句"""
        imports = []
        
        # 根据不同语言解析导入
        if language == 'Python':
            # 简单的Python导入解析
            lines = content.split('\n')
            for line in lines:
                line = line.strip()
                if line.startswith('import ') or line.startswith('from '):
                    imports.append(line)
        
        # 可以添加其他语言的导入解析...
        
        return imports
    
    @classmethod
    def extract_comments(cls, content: str, language: str) -> List[str]:
        """提取文件中的注释"""
        comments = []
        
        # 根据不同语言提取注释
        if language == 'Python':
            # 简单的Python注释提取
            lines = content.split('\n')
            for line in lines:
                line = line.strip()
                if line.startswith('#'):
                    comments.append(line)
        
        # 可以添加其他语言的注释提取...
        
        return comments
    
    @classmethod
    def identify_dependencies(cls, repo_path: str) -> Dict[str, Any]:
        """识别项目依赖"""
        dependencies = {}
        
        # 检查Python依赖
        req_files = ['requirements.txt', 'Pipfile', 'pyproject.toml']
        for req_file in req_files:
            req_path = os.path.join(repo_path, req_file)
            if os.path.exists(req_path):
                with open(req_path, 'r', encoding='utf-8') as f:
                    dependencies[req_file] = f.read()
        
        # 检查JavaScript依赖
        package_json = os.path.join(repo_path, 'package.json')
        if os.path.exists(package_json):
            try:
                import json
                with open(package_json, 'r', encoding='utf-8') as f:
                    package_data = json.load(f)
                    if 'dependencies' in package_data:
                        dependencies['package.json:dependencies'] = package_data['dependencies']
                    if 'devDependencies' in package_data:
                        dependencies['package.json:devDependencies'] = package_data['devDependencies']
            except Exception as e:
                logger.error(f"解析package.json失败: {str(e)}")
        
        return dependencies
```

### src/utils/file_handler.py

```python
import os
import logging
from typing import Dict, List, Set, Any, Optional

logger = logging.getLogger(__name__)

class FileHandler:
    """文件处理工具类"""
    
    @staticmethod
    def read_file(file_path: str, encoding: str = 'utf-8') -> str:
        """
        读取文件内容
        
        Args:
            file_path: 文件路径
            encoding: 文件编码，默认utf-8
            
        Returns:
            str: 文件内容
        """
        try:
            with open(file_path, 'r', encoding=encoding) as f:
                content = f.read()
            return content
        except UnicodeDecodeError:
            # 如果UTF-8解码失败，尝试其他编码
            try:
                with open(file_path, 'r', encoding='latin-1') as f:
                    content = f.read()
                return content
            except Exception as e:
                logger.warning(f"无法读取文件 {file_path}: {str(e)}")
                return f"[无法读取文件内容: {str(e)}]"
        except Exception as e:
            logger.warning(f"读取文件 {file_path} 失败: {str(e)}")
            return f"[读取文件失败: {str(e)}]"
    
    @staticmethod
    def write_file(file_path: str, content: str, encoding: str = 'utf-8') -> bool:
        """
        写入文件内容
        
        Args:
            file_path: 文件路径
            content: 要写入的内容
            encoding: 文件编码，默认utf-8
            
        Returns:
            bool: 是否成功写入
        """
        try:
            # 确保目录存在
            os.makedirs(os.path.dirname(os.path.abspath(file_path)), exist_ok=True)
            
            with open(file_path, 'w', encoding=encoding) as f:
                f.write(content)
            return True
        except Exception as e:
            logger.error(f"写入文件 {file_path} 失败: {str(e)}")
            return False
    
    @staticmethod
    def list_files(dir_path: str, ignore_func: Optional[callable] = None) -> List[str]:
        """
        列出目录中的所有文件
        
        Args:
            dir_path: 目录路径
            ignore_func: 用于判断是否忽略文件的函数
            
        Returns:
            List[str]: 文件路径列表
        """
        file_list = []
        
        try:
            for root, dirs, files in os.walk(dir_path):
                # 如果提供了忽略函数，过滤目录
                if ignore_func:
                    dirs[:] = [d for d in dirs if not ignore_func(os.path.join(root, d))]
                
                for file in files:
                    file_path = os.path.join(root, file)
                    
                    # 如果提供了忽略函数，过滤文件
                    if ignore_func and ignore_func(file_path):
                        continue
                        
                    file_list.append(file_path)
                    
            return file_list
            
        except Exception as e:
            logger.error(f"列出目录 {dir_path} 中的文件失败: {str(e)}")
            return []
    
    @staticmethod
    def get_repo_structure(repo_path: str, ignore_func: Optional[callable] = None) -> Dict[str, Any]:
        """
        获取代码仓库结构
        
        Args:
            repo_path: 仓库路径
            ignore_func: 用于判断是否忽略文件的函数
            
        Returns:
            Dict[str, Any]: 仓库结构
        """
        try:
            structure = {"name": os.path.basename(repo_path), "type": "directory", "children": []}
            
            def build_structure(path, parent):
                """递归构建目录结构"""
                try:
                    items = os.listdir(path)
                    for item in sorted(items):
                        item_path = os.path.join(path, item)
                        
                        # 如果提供了忽略函数，过滤文件和目录
                        if ignore_func and ignore_func(item_path):
                            continue
                            
                        if os.path.isdir(item_path):
                            # 目录
                            dir_node = {"name": item, "type": "directory", "children": []}
                            parent["children"].append(dir_node)
                            build_structure(item_path, dir_node)
                        else:
                            # 文件
                            parent["children"].append({"name": item, "type": "file"})
                except Exception as e:
                    logger.warning(f"构建 {path} 的结构失败: {str(e)}")
            
            build_structure(repo_path, structure)
            return structure
            
        except Exception as e:
            logger.error(f"获取仓库 {repo_path} 结构失败: {str(e)}")
            return {"name": os.path.basename(repo_path), "type": "directory", "children": [], "error": str(e)}
```

### src/utils/prompt_templates.py

```python
import json
from typing import Dict, Any, List

class PromptTemplates:
    """提示词模板类"""
    
    @staticmethod
    def get_readme_generation_prompt(repo_analysis: Dict[str, Any]) -> str:
        """
        获取README生成提示词
        
        Args:
            repo_analysis: 仓库分析结果
            
        Returns:
            str: 格式化的提示词
        """
        # 将仓库分析结果转换为JSON字符串
        repo_json = json.dumps(repo_analysis, indent=2, ensure_ascii=False)
        
        # 构建提示词
        prompt = f"""请根据以下代码仓库的分析结果，生成一个专业的README.md文件。

仓库分析结果:
```json
{repo_json}
```

生成README时，请考虑以下要点:
1. 开始用一个简短清晰的项目描述
2. 列出主要特性和功能
3. 包含安装说明
4. 提供使用示例和API文档（如果适用）
5. 解释项目架构和主要组件
6. 包含技术栈信息
7. 添加贡献指南（如果适用）
8. 添加许可证信息（如果找到）
9. 使用Markdown格式，包括标题、列表、代码块等
10. 确保README清晰、专业、易于阅读

请直接生成完整的README.md内容，使用Markdown格式，不需要额外的解释。
"""
        return prompt
    
    @staticmethod
    def get_file_analysis_prompt(file_path: str, file_content: str) -> str:
        """
        获取文件分析提示词
        
        Args:
            file_path: 文件路径
            file_content: 文件内容
            
        Returns:
            str: 格式化的提示词
        """
        # 构建文件分析提示词
        prompt = f"""请分析以下代码文件，提取关键信息并以JSON格式返回结果：

文件路径: {file_path}

文件内容:
```
{file_content[:10000]}  # 限制内容长度
{"..." if len(file_content) > 10000 else ""}
```

请提取以下信息并以JSON格式返回：
1. 文件的主要目的和功能
2. 主要类、函数或组件
3. 依赖关系
4. 核心逻辑
5. 配置信息（如果有）
6. 代码质量评估

JSON格式示例:
{{
  "purpose": "文件的主要目的",
  "components": ["主要类或函数1", "主要类或函数2"],
  "dependencies": ["依赖1", "依赖2"],
  "logic": "核心逻辑概述",
  "configuration": "配置信息",
  "quality": "代码质量评估"
}}

请确保返回有效的JSON格式。
"""
        return prompt
    
    @staticmethod
    def get_repo_summary_prompt(repo_structure: Dict[str, Any], key_files_content: Dict[str, str]) -> str:
        """
        获取仓库摘要提示词
        
        Args:
            repo_structure: 仓库结构
            key_files_content: 关键文件内容
            
        Returns:
            str: 格式化的提示词
        """
        # 将仓库结构转换为JSON字符串
        structure_json = json.dumps(repo_structure, indent=2, ensure_ascii=False)
        
        # 构建关键文件内容字符串
        key_files_str = ""
        for file_path, content in key_files_content.items():
            key_files_str += f"\n--- {file_path} ---\n"
            key_files_str += content[:1000]  # 限制每个文件内容长度
            if len(content) > 1000:
                key_files_str += "\n...(内容已截断)...\n"
        
        # 构建提示词
        prompt = f"""请分析以下代码仓库的结构和关键文件内容，提供一个全面的项目摘要。

仓库结构:
```json
{structure_json}
```

关键文件内容:
{key_files_str}

请提供以下内容:
1. 项目的主要用途和功能
2. 技术栈和主要依赖
3. 项目架构概述
4. 主要组件和它们的功能
5. 推荐的安装和使用步骤
6. 项目的亮点和特色

请以JSON格式返回分析结果，确保返回有效的JSON。
"""
        return prompt
```

### src/services/\_\_init\_\_.py

```python
# 服务包初始化文件
```

### src/services/code_analyzer.py

```python
import os
import logging
from typing import Dict, List, Any, Set

from src.utils.code_parser import CodeParser
from src.utils.file_handler import FileHandler
from src.models.agent import ReadmeAgent

logger = logging.getLogger(__name__)

class CodeAnalyzer:
    """代码分析服务类"""
    
    # 关键文件名，用于优先分析
    KEY_FILES = {
        'README.md', 'package.json', 'setup.py', 'requirements.txt',
        'Pipfile', 'pyproject.toml', 'Makefile', 'Dockerfile',
        'docker-compose.yml', '.gitignore', 'LICENSE', 'CONTRIBUTING.md'
    }
    
    # 分析的最大文件数
    MAX_FILES_TO_ANALYZE = 20
    
    def __init__(self, repo_path: str):
        """
        初始化代码分析器
        
        Args:
            repo_path: 代码仓库路径
        """
        self.repo_path = repo_path
        self.agent = ReadmeAgent()
    
    def analyze(self) -> Dict[str, Any]:
        """
        分析代码仓库
        
        Returns:
            Dict[str, Any]: 包含仓库分析结果的字典
        """
        logger.info(f"开始分析代码仓库: {self.repo_path}")
        
        # 检查路径是否存在
        if not os.path.exists(self.repo_path):
            raise ValueError(f"仓库路径不存在: {self.repo_path}")
        
        # 初始化分析结果
        analysis_result = {
            "repo_name": os.path.basename(self.repo_path),
            "structure": {},
            "files_analysis": {},
            "dependencies": {},
            "languages": set(),
            "key_files": {},
        }
        
        try:
            # 获取仓库结构
            analysis_result["structure"] = FileHandler.get_repo_structure(
                self.repo_path, 
                ignore_func=CodeParser.should_ignore
            )
            
            # 列出所有文件
            all_files = FileHandler.list_files(
                self.repo_path, 
                ignore_func=CodeParser.should_ignore
            )
            
            # 识别依赖
            analysis_result["dependencies"] = CodeParser.identify_dependencies(self.repo_path)
            
            # 分析关键文件
            self._analyze_key_files(all_files, analysis_result)
            
            # 分析代表性文件
            self._analyze_representative_files(all_files, analysis_result)
            
            # 转换语言集合为列表
            analysis_result["languages"] = list(analysis_result["languages"])
            
            logger.info(f"代码仓库分析完成，识别到 {len(analysis_result['languages'])} 种语言，分析了 {len(analysis_result['files_analysis'])} 个文件")
            
            return analysis_result
            
        except Exception as e:
            logger.error(f"分析代码仓库失败: {str(e)}")
            raise
    
    def _analyze_key_files(self, all_files: List[str], analysis_result: Dict[str, Any]) -> None:
        """
        分析关键文件
        
        Args:
            all_files: 所有文件路径列表
            analysis_result: 分析结果字典
        """
        # 查找关键文件
        key_files = []
        for file_path in all_files:
            file_name = os.path.basename(file_path)
            if file_name in self.KEY_FILES:
                key_files.append(file_path)
        
        # 读取关键文件内容
        for file_path in key_files:
            rel_path = os.path.relpath(file_path, self.repo_path)
            file_content = FileHandler.read_file(file_path)
            
            # 添加到关键文件字典
            analysis_result["key_files"][rel_path] = file_content
            
            # 特殊处理README.md，如果存在的话
            if os.path.basename(file_path) == 'README.md':
                analysis_result["existing_readme"] = file_content
    
    def _analyze_representative_files(self, all_files: List[str], analysis_result: Dict[str, Any]) -> None:
        """
        分析代表性文件
        
        Args:
            all_files: 所有文件路径列表
            analysis_result: 分析结果字典
        """
        # 按文件类型分组
        files_by_extension = {}
        for file_path in all_files:
            _, ext = os.path.splitext(file_path)
            if ext not in files_by_extension:
                files_by_extension[ext] = []
            files_by_extension[ext].append(file_path)
        
        # 选择每种类型的代表性文件
        representative_files = []
        for ext, files in files_by_extension.items():
            # 跳过不受支持的扩展名
            if ext not in CodeParser.SUPPORTED_EXTENSIONS:
                continue
                
            # 根据文件大小和路径深度选择代表性文件
            # 优先选择较小且路径较浅的文件
            sorted_files = sorted(
                files,
                key=lambda f: (
                    os.path.getsize(f),  # 文件大小
                    len(f.split(os.sep))  # 路径深度
                )
            )
            
            # 每种类型最多选择3个文件
            representative_files.extend(sorted_files[:3])
        
        # 限制分析的文件总数
        representative_files = representative_files[:self.MAX_FILES_TO_ANALYZE]
        
        # 分析代表性文件
        for file_path in representative_files:
            rel_path = os.path.relpath(file_path, self.repo_path)
            
            # 如果已经在关键文件中，跳过
            if rel_path in analysis_result["key_files"]:
                continue
                
            # 读取文件内容
            file_content = FileHandler.read_file(file_path)
            
            # 识别语言
            language = CodeParser.identify_language(file_path)
            if language != 'Unknown':
                analysis_result["languages"].add(language)
            
            # 使用Agent分析文件
            file_analysis = self.agent.analyze_code_file(rel_path, file_content)
            
            # 添加到分析结果
            analysis_result["files_analysis"][rel_path] = {
                "language": language,
                "analysis": file_analysis,
                "size": len(file_content)
            }
```

### src/services/readme_generator.py

```python
import os
import logging
from typing import Dict, Any

from src.models.agent import ReadmeAgent

logger = logging.getLogger(__name__)

class ReadmeGenerator:
    """README生成服务类"""
    
    def __init__(self):
        """初始化GeRM"""
        self.agent = ReadmeAgent()
    
    def generate(self, repo_analysis: Dict[str, Any]) -> str:
        """
        根据仓库分析结果生成README
        
        Args:
            repo_analysis: 仓库分析结果
            
        Returns:
            str: 生成的README内容
        """
        logger.info("开始生成README内容")
        
        try:
            # 预处理分析结果
            processed_analysis = self._preprocess_analysis(repo_analysis)
            
            # 使用Agent生成README
            readme_content = self.agent.generate_readme(processed_analysis)
            
            logger.info("README生成成功")
            return readme_content
            
        except Exception as e:
            logger.error(f"生成README失败: {str(e)}")
            raise
    
    def _preprocess_analysis(self, repo_analysis: Dict[str, Any]) -> Dict[str, Any]:
        """
        预处理仓库分析结果
        
        Args:
            repo_analysis: 原始仓库分析结果
            
        Returns:
            Dict[str, Any]: 处理后的分析结果
        """
        processed = repo_analysis.copy()
        
        # 如果languages是集合，转换为列表
        if isinstance(processed.get("languages"), set):
            processed["languages"] = list(processed["languages"])
        
        # 提取最重要的文件分析结果
        if "files_analysis" in processed:
            important_files = {}
            for path, analysis in processed["files_analysis"].items():
                # 只保留分析结果，不包含文件内容
                important_files[path] = {
                    "language": analysis.get("language", "Unknown"),
                    "summary": analysis.get("analysis", {}).get("purpose", "")
                }
            processed["important_files"] = important_files
        
        # 确保依赖格式一致
        if "dependencies" in processed:
            # 处理依赖信息，确保格式一致
            pass
        
        # 添加仓库名称和路径
        if "repo_name" not in processed:
            processed["repo_name"] = "Unknown Project"
        
        return processed
```

### tests/\_\_init\_\_.py

```python
# 测试包初始化文件
```

### tests/test_agent.py

```python
import unittest
from unittest.mock import MagicMock, patch

from src.models.agent import ReadmeAgent
from config.config import Config

class TestReadmeAgent(unittest.TestCase):
    """测试ReadmeAgent类"""
    
    def setUp(self):
        # 设置测试前的准备工作
        self.agent = ReadmeAgent()
        
        # 模拟OpenAI客户端
        self.mock_openai_client_patcher = patch('src.models.agent.OpenAIClient')
        self.mock_openai_client = self.mock_openai_client_patcher.start()
        
        # 设置模拟的返回值
        self.mock_instance = self.mock_openai_client.return_value
        self.mock_instance.chat_completion.return_value = "测试README内容"
        
        # 替换agent的客户端为模拟对象
        self.agent.openai_client = self.mock_instance
    
    def tearDown(self):
        # 测试结束后的清理工作
        self.mock_openai_client_patcher.stop()
    
    def test_generate_readme(self):
        """测试README生成功能"""
        # 准备测试数据
        repo_analysis = {
            "repo_name": "test-repo",
            "languages": ["Python"],
            "structure": {"name": "test-repo", "type": "directory", "children": []}
        }
        
        # 调用被测试的方法
        result = self.agent.generate_readme(repo_analysis)
        
        # 验证结果
        self.assertEqual(result, "测试README内容")
        
        # 验证OpenAI客户端被正确调用
        self.mock_instance.chat_completion.assert_called_once()
        args, kwargs = self.mock_instance.chat_completion.call_args
        self.assertEqual(kwargs["system_prompt"], Config.SYSTEM_PROMPT)
    
    def test_analyze_code_file(self):
        """测试代码文件分析功能"""
        # 准备测试数据
        file_path = "test.py"
        file_content = "def hello(): print('Hello, World!')"
        
        # 设置模拟的JSON返回值
        self.mock_instance.chat_completion.return_value = '{"purpose": "测试函数", "components": ["hello"]}'
        
        # 调用被测试的方法
        result = self.agent.analyze_code_file(file_path, file_content)
        
        # 验证结果
        self.assertEqual(result["purpose"], "测试函数")
        self.assertEqual(result["components"], ["hello"])
        
        # 验证OpenAI客户端被正确调用
        self.mock_instance.chat_completion.assert_called_once()

if __name__ == '__main__':
    unittest.main()
```

### tests/test_code_analyzer.py

```python
import unittest
import os
from unittest.mock import MagicMock, patch
import tempfile
import shutil

from src.services.code_analyzer import CodeAnalyzer

class TestCodeAnalyzer(unittest.TestCase):
    """测试CodeAnalyzer类"""
    
    def setUp(self):
        # 创建临时目录作为测试仓库
        self.test_repo_path = tempfile.mkdtemp()
        
        # 在临时目录中创建一些测试文件
        with open(os.path.join(self.test_repo_path, "test.py"), "w") as f:
            f.write("def test(): pass")
            
        with open(os.path.join(self.test_repo_path, "README.md"), "w") as f:
            f.write("# Test Repository")
            
        with open(os.path.join(self.test_repo_path, "requirements.txt"), "w") as f:
            f.write("pytest==7.0.0")
            
        # 创建一个子目录和文件
        os.makedirs(os.path.join(self.test_repo_path, "src"), exist_ok=True)
        with open(os.path.join(self.test_repo_path, "src", "main.py"), "w") as f:
            f.write("def main(): print('Hello')")
        
        # 创建应忽略的目录和文件
        os.makedirs(os.path.join(self.test_repo_path, "__pycache__"), exist_ok=True)
        with open(os.path.join(self.test_repo_path, "__pycache__", "test.cpython-39.pyc"), "w") as f:
            f.write("# Compiled Python file")
        
        # 模拟ReadmeAgent
        self.mock_agent_patcher = patch('src.services.code_analyzer.ReadmeAgent')
        self.mock_agent = self.mock_agent_patcher.start()
        
        # 设置模拟的返回值
        self.mock_instance = self.mock_agent.return_value
        self.mock_instance.analyze_code_file.return_value = {"purpose": "Test purpose"}
        
        # 初始化代码分析器
        self.analyzer = CodeAnalyzer(self.test_repo_path)
        self.analyzer.agent = self.mock_instance
    
    def tearDown(self):
        # 清理临时目录
        shutil.rmtree(self.test_repo_path)
        
        # 停止模拟
        self.mock_agent_patcher.stop()
    
    def test_analyze(self):
        """测试代码仓库分析功能"""
        # 调用被测试的方法
        result = self.analyzer.analyze()
        
        # 验证结果
        self.assertEqual(result["repo_name"], os.path.basename(self.test_repo_path))
        self.assertIn("Python", result["languages"])
        self.assertIn("README.md", result["key_files"])
        self.assertIn("requirements.txt", result["key_files"])
        
        # 验证结构包含正确的目录和文件
        structure = result["structure"]
        self.assertEqual(structure["name"], os.path.basename(self.test_repo_path))
        self.assertEqual(structure["type"], "directory")
        
        # 验证忽略的目录不在结构中
        children_names = [child["name"] for child in structure["children"]]
        self.assertIn("src", children_names)
        self.assertIn("test.py", children_names)
        self.assertNotIn("__pycache__", children_names)
        
        # 验证代理被调用来分析文件
        self.mock_instance.analyze_code_file.assert_called()

if __name__ == '__main__':
    unittest.main()
```

### tests/test_readme_generator.py

```python
import unittest
from unittest.mock import MagicMock, patch

from src.services.readme_generator import ReadmeGenerator

class TestReadmeGenerator(unittest.TestCase):
    """测试ReadmeGenerator类"""
    
    def setUp(self):
        # 设置测试前的准备工作
        self.generator = ReadmeGenerator()
        
        # 模拟ReadmeAgent
        self.mock_agent_patcher = patch('src.services.readme_generator.ReadmeAgent')
        self.mock_agent = self.mock_agent_patcher.start()
        
        # 设置模拟的返回值
        self.mock_instance = self.mock_agent.return_value
        self.mock_instance.generate_readme.return_value = "# 测试项目\n\n这是一个测试项目的README。"
        
        # 替换generator的agent为模拟对象
        self.generator.agent = self.mock_instance
        
        # 准备测试数据
        self.test_repo_analysis = {
            "repo_name": "test-project",
            "languages": set(["Python", "Markdown"]),
            "structure": {"name": "test-project", "type": "directory", "children": []},
            "files_analysis": {
                "test.py": {
                    "language": "Python",
                    "analysis": {"purpose": "测试文件"},
                    "size": 100
                }
            },
            "key_files": {
                "README.md": "# Old README"
            },
            "dependencies": {
                "requirements.txt": "pytest==7.0.0"
            }
        }
    
    def tearDown(self):
        # 测试结束后的清理工作
        self.mock_agent_patcher.stop()
    
    def test_generate(self):
        """测试README生成功能"""
        # 调用被测试的方法
        result = self.generator.generate(self.test_repo_analysis)
        
        # 验证结果
        self.assertEqual(result, "# 测试项目\n\n这是一个测试项目的README。")
        
        # 验证预处理和代理调用
        self.mock_instance.generate_readme.assert_called_once()
        
        # 验证传递给代理的预处理数据
        args, kwargs = self.mock_instance.generate_readme.call_args
        processed_analysis = args[0]
        
        # 验证预处理转换了语言集合为列表
        self.assertIsInstance(processed_analysis["languages"], list)
        self.assertEqual(set(processed_analysis["languages"]), set(["Python", "Markdown"]))
        
        # 验证重要文件被提取
        self.assertIn("important_files", processed_analysis)
        self.assertIn("test.py", processed_analysis["important_files"])
        self.assertEqual(
            processed_analysis["important_files"]["test.py"]["language"], 
            "Python"
        )

if __name__ == '__main__':
    unittest.main()
```

## 总结

这个项目提供了一个完整的框架，用于利用大模型Agent自动为代码仓库生成高质量的README.md文件。主要功能包括：

1. 代码仓库分析：自动分析代码结构、识别编程语言、提取关键文件和依赖关系
2. 智能内容生成：使用OpenAI API生成专业的README内容
3. 灵活配置：支持自定义模型参数和输出选项
4. 命令行界面：易于集成到开发工作流程

每个组件都有明确的职责，遵循模块化设计原则，使系统易于扩展和维护。

要扩展这个项目，您可以考虑：
1. 添加对更多编程语言的深度支持
2. 实现更复杂的代码分析功能
3. 添加模板选择功能
4. 增加国际化支持
5. 开发Web界面
6. 集成到CI/CD流程或Git钩子中

这个项目不仅能节省开发者编写文档的时间，还能确保README的质量和完整性，提高项目的可用性和可访问性。
